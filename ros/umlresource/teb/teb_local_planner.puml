
@startuml
Title "teb_local_planner类图"
class PoseSE2
{
-- public method --
  +PoseSE2()
  +PoseSE2(const Eigen::Ref<const Eigen::Vector2d>& position, double theta)
  +PoseSE2(double x, double y, double theta)
  +PoseSE2(const geometry_msgs::Pose& pose)
  +PoseSE2(const tf::Pose& pose)
  +PoseSE2(const PoseSE2& pose)
  +~PoseSE2()
  +Eigen::Vector2d& position()
  +const Eigen::Vector2d& position() const
  +double& x()
  +const double& x() const
  +double& y()
  +const double& y() const
  +double& theta()
  +const double& theta() const
  +void setZero()
  +void toPoseMsg(geometry_msgs::Pose& pose) const
  +Eigen::Vector2d orientationUnitVec() const
  +void scale(double factor)
  +void plus(const double* pose_as_array)
  +void averageInPlace(const PoseSE2& pose1, const PoseSE2& pose2)
  +static PoseSE2 average(const PoseSE2& pose1, const PoseSE2& pose2)
  +void rotateGlobal(double angle, bool adjust_theta=true)
  +PoseSE2& operator=( const PoseSE2& rhs )
  +PoseSE2& operator+=(const PoseSE2& rhs)
  +friend PoseSE2 operator+(PoseSE2 lhs, const PoseSE2& rhs)
  +PoseSE2& operator-=(const PoseSE2& rhs)
  +friend PoseSE2 operator-(PoseSE2 lhs, const PoseSE2& rhs)
  +friend PoseSE2 operator*(PoseSE2 pose, double scalar)
  +friend PoseSE2 operator*(double scalar, PoseSE2 pose)
  +friend std::ostream& operator<< (std::ostream& stream, const PoseSE2& pose)
-- private data --
  -Eigen::Vector2d _position;
  -double _theta;

}


class HomotopyClassPlanner


class GraphSearchInterface
{
-- public method --
+virtual void createGraph()
+void clearGraph()

-- public data --
+HcGraph graph_

-- protected method --
#GraphSearchInterface()
#void DepthFirst()
-- protected data --
#const TebConfig* cfg_
#HomotopyClassPlanner* const hcp_
}


class lrKeyPointGraph
{
-- public method --
+lrKeyPointGraph()
+virtual ~lrKeyPointGraph()
+virtual void createGraph();
}


class ProbRoadmapGraph
{
-- public method --
+ProbRoadmapGraph()
+virtual ~ProbRoadmapGraph()
+virtual void createGraph()
--private data  --
-boost::random::mt19937 rnd_generator_;
}

GraphSearchInterface *-- HomotopyClassPlanner
GraphSearchInterface *-- TebConfig
GraphSearchInterface <|-- lrKeyPointGraph
GraphSearchInterface <|-- ProbRoadmapGraph


class VelMeasurement
{
-- public data --
+double v = 0;
+double omega = 0;
}
class FailureDetector
{
-- public method --
+FailureDetector()
+~FailureDetector()
+void setBufferLength(int length)
+void update();
+bool isOscillating() const;
+void clear();
-- protected method --
#bool detect(double v_eps, double omega_eps);
-- private data --
-boost::circular_buffer<VelMeasurement> buffer_
-bool oscillating_

}

FailureDetector *-- VelMeasurement













class HSignature
class HSignature3d
class EquivalenceClass
{
-- public method --
   +EquivalenceClass()
   +virtual ~EquivalenceClass()
   +virtual bool isEqual(const EquivalenceClass& other) const = 0;
   +virtual bool isValid() const = 0;
   +virtual bool isReasonable() const = 0;
}

EquivalenceClass <|-- HSignature
EquivalenceClass <|-- HSignature3d



class Trajectory
class Robot
class GoalTolerance
class Obstacles
class Optimization
class HomotopyClasses
class Recovery

class TebConfig
{
--public data --
  +std::string odom_topic;
  +std::string map_frame;
  +Recovery recovery
  +Trajectory trajectory
  +Robot robot
  +GoalTolerance goal_tolerance
  +Obstacles　obstacles
  +HomotopyClasses homotopyclasses
  +Optimization optim
-- public method --
  +TebConfig()
  +void loadRosParamFromNodeHandle(const ros::NodeHandle& nh);
  +void reconfigure(KinematicParamsConfig& cfg);
  +void checkParameters() const;
  +void checkDeprecated(const ros::NodeHandle& nh) const;
  +boost::mutex& configMutex()
-- private date --
  -boost::mutex config_mutex_;

}

TebConfig *-- Recovery
TebConfig *-- Trajectory
TebConfig *-- Robot
TebConfig *-- GoalTolerance
TebConfig *-- Obstacles
TebConfig *-- HomotopyClasses
TebConfig *-- Optimization


class TebOptimalPlanner

class TebVisualization
{
--public method--
+TebVisualization();
+TebVisualization(ros::NodeHandle& nh, const TebConfig& cfg)
+void initialize(ros::NodeHandle& nh, const TebConfig& cfg);
+void publishGlobalPlan(global_plan) const;
+void publishLocalPlan(local_plan)
+void publishLocalPlanAndPoses(const TimedElasticBand& teb)
+void publishRobotFootprintModel(current_pose, robot_model, ns,color)
+void publishInfeasibleRobotPose(current_pose, robot_model)
+void publishObstacles(const ObstContainer& obstacles) const;
+void publishViaPoints(via_points, ns) const;
+void publishGraph(graph, ns);
+void publishPathContainer(first, last, ns)
+void publishTebContainer(teb_planner, ns)
+void publishFeedbackMessage(teb_planners, selected_trajectory_idx, obstacles)
+void publishFeedbackMessage(teb_planner, bstacles)
+static std_msgs::ColorRGBA toColorMsg(a,r,g,b);
-- protected method --
#bool printErrorWhenNotInitialized() const;
-- protected data --
＃ros::Publisher global_plan_pub_
＃ros::Publisher local_plan_pub_
＃ros::Publisher teb_poses_pub_
＃ros::Publisher teb_marker_pub_
＃ros::Publisher feedback_pub_
＃const TebConfig* cfg_
＃bool initialized_
}



TebVisualization *-- TebConfig






@enduml