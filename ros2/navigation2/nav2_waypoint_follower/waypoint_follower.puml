@startuml
'https://plantuml.com/class-diagram

namespace nav2_waypoint_follower{

enum ActionStatus{
UNKNOWN = 0,
PROCESSING = 1,
FAILED = 2,
SUCCEEDED = 3
}


class WaypointFollower{
-- public method --
using ActionT = nav2_msgs::action::FollowWaypoints;
using ClientT = nav2_msgs::action::NavigateToPose;
using ActionServer = nav2_util::SimpleActionServer<ActionT>;
using ActionClient = rclcpp_action::Client<ClientT>;
WaypointFollower();
~WaypointFollower();
-- protected method --
nav2_util::CallbackReturn on_configure(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_activate(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_shutdown(const rclcpp_lifecycle::State & state) override;
void followWaypoints();
void resultCallback(const rclcpp_action::ClientGoalHandle<ClientT>::WrappedResult & result);
void goalResponseCallback(future);
-- protected data --
std::unique_ptr<ActionServer> action_server_;
ActionClient::SharedPtr nav_to_pose_client_;
rclcpp::Node::SharedPtr client_node_;
std::shared_future<rclcpp_action::ClientGoalHandle<ClientT>::SharedPtr> future_goal_handle_;
bool stop_on_failure_;
ActionStatus current_goal_status_;
int loop_rate_;
std::vector<int> failed_ids_;

}


}

nav2_util.LifecycleNode <-- nav2_waypoint_follower.WaypointFollower
@enduml