@startuml
'https://plantuml.com/class-diagram

namespace nav2_controller{
class ProgressChecker

class ControllerServer{
-- public method --
using ControllerMap = std::unordered_map<std::string, nav2_core::Controller::Ptr>;
ControllerServer();
~ControllerServer();
-- protected method --
nav2_util::CallbackReturn on_configure(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_activate(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & state) override;
nav2_util::CallbackReturn on_shutdown(const rclcpp_lifecycle::State & state) override;
using Action = nav2_msgs::action::FollowPath;
using ActionServer = nav2_util::SimpleActionServer<Action>;
void computeControl();
bool findControllerId(const std::string & c_name, std::string & name);
void setPlannerPath(const nav_msgs::msg::Path & path);
void computeAndPublishVelocity();
void updateGlobalPath();
void publishVelocity(const geometry_msgs::msg::TwistStamped & velocity);
void publishZeroVelocity();
bool isGoalReached();
bool getRobotPose(geometry_msgs::msg::PoseStamped & pose);
double getThresholdedVelocity(double velocity, double threshold)
nav_2d_msgs::msg::Twist2D getThresholdedTwist(const nav_2d_msgs::msg::Twist2D & twist)

-- protected data --
std::unique_ptr<ActionServer> action_server_;
std::shared_ptr<nav2_costmap_2d::Costmap2DROS> costmap_ros_;
std::unique_ptr<nav2_util::NodeThread> costmap_thread_;
std::unique_ptr<nav_2d_utils::OdomSubscriber> odom_sub_;
rclcpp_lifecycle::LifecyclePublisher<geometry_msgs::msg::Twist>::SharedPtr vel_publisher_;
pluginlib::ClassLoader<nav2_core::ProgressChecker> progress_checker_loader_;
nav2_core::ProgressChecker::Ptr progress_checker_;
std::string default_progress_checker_id_;
std::string default_progress_checker_type_;
std::string progress_checker_id_;
std::string progress_checker_type_;
pluginlib::ClassLoader<nav2_core::GoalChecker> goal_checker_loader_;
nav2_core::GoalChecker::Ptr goal_checker_;
std::string default_goal_checker_id_;
std::string default_goal_checker_type_;
std::string goal_checker_id_;
std::string goal_checker_type_;
pluginlib::ClassLoader<nav2_core::Controller> lp_loader_;
ControllerMap controllers_;
std::vector<std::string> default_ids_;
std::vector<std::string> default_types_;
std::vector<std::string> controller_ids_;
std::vector<std::string> controller_types_;
std::string controller_ids_concat_, current_controller_;
double controller_frequency_;
double min_x_velocity_threshold_;
double min_y_velocity_threshold_;
double min_theta_velocity_threshold_;
geometry_msgs::msg::Pose end_pose_;
}

}

nav2_util.LifecycleNode <-- nav2_controller.ControllerServer

@enduml